----------------
LESSONS LEARNT
--------------
/*
tu widac glupote getterow i setterow.
nazwa ponizszej metody sugeruje, ze get MasztTrafiony, czyli pobieramy numer masztu trafionego czyli int,
pobieramy wartosc zmiennej MasztTrafiony czyli true/false
Hmm, juz mi wyszly dwie rozne rzeczy, a chcialem innymi slowami opisac ta sama JEDNA rzecz
Bo co innego myslimy o dzialaniu, jak wiemy ze to getter, a co innego, jak czytamy nazwe metody
i jej nazwa sie sugerujemy co robi kod

 */
private boolean getMasztTrafiony(int maszt){
return masztTrafiony[maszt];
}
/*
Lepiej napisac jak ponizej. Wtedy jednoznacznie sie kojarzy. Uniknelismy konwencji get/set, a jest jednoznacznie :)
*/
	boolean isMasztTrafiony(int maszt){
		return masztTrafiony[maszt];
	}

	------------------
	Bardzo kiepski przyklad komunikacji miedzy 2ma metodami. Uzylismy do tego zmiennej globalnej w klasie.
	zmienna: ostatnioZatopiony
	I piszac taki kod wiemy co robimy, jakie mamy intencje i pisze sie go latwo.
	Ale pol roku pozniej probujemy sie zastanowic, w ktorych metodach ta zmienna jest uzyta, kiedy zmienia wartosc,
	czy nie jest uzyta o zgrozo poza klasa, bo nie jest nawet private, i ktos moglby w innej klasie ja odczytac/zapisac
	I taka analiza wstecz jest trudna. Musimy przeszukac caly projekt czy gdzies nie uzywa tej zmiennej.
	Cale szczescie ze tylko dwie metody jej uzywaja. Bo jak wiecej, to zastanowienie sie jak ja wyrugowac i czegos
	nie zepsuc przy okazji, moze byc trudne.

	A ze ta zmienna jest zdeklarowana w klasie GUI, a nic wspolnego z GUI nie ma, to juz w ogole tragedia.

	class Klasa {
	boolean ostatnioZatopiony;

	void metoda1(){
	// ustawia true/false dla naszej zmiennej
	// a teraz wywoluje metode2()
	wypiszKomunikatNaKonsoliJesliTrafionyLubZatopiony();
	}

	void wypiszKomunikatNaKonsoliJesliTrafionyLubZatopiony(){
    		if (ostatnioTrafiony) System.out.println("Debug:    TRAFIONY!!");
    		if (ostatnioZatopiony) System.out.println("Debug:    TRAFIONY ZATOPIONY!!");
    }

    }
    A wystarczylo napisac to tak:

    class Klasa {

    	void metoda1(){
    	boolean ostatnioZatopiony;
    	// ustawia true/false dla naszej zmiennej, tym razem lokalnej!
    	// a teraz wywoluje metode2()
    	wypiszKomunikatNaKonsoliJesliTrafionyLubZatopiony(ostatnioZatopiony);
    	}

    	void wypiszKomunikatNaKonsoliJesliTrafionyLubZatopiony(boolean ostatnioZatopiony){
        		if (ostatnioTrafiony) System.out.println("Debug:    TRAFIONY!!");
        		if (ostatnioZatopiony) System.out.println("Debug:    TRAFIONY ZATOPIONY!!");
        }

        }

    i znika nam potrzeba deklaracji tej zmiennej w klasie. widac wyraznie, ze zmienna pojawia i konczy zywot
    w obrebie jednej metody.
---------------------------------
Ale ujnia! Java operatory arytmetyczne umie stosowac tylko dla int/double.
Jak masz byte + byte to spadaj na drzewo

Przyklad:
byte d=2,e=2,f=2;
        f=d+e; // WRONG
        f=((byte)(d+e));  // OK

Operatory bitowe tak samo!
byte a=3,b=6,c=9;
a=b | c; // WRONG
a=(byte)(b|c); // OK
Ale ja bym uwazal, bo co sie dzieje jak on rozszerza byte na int?? co ze znakiem plusa/minusa?
i co jak odcina cos z int zeby przeksztalcic na byte?? Do sprawdzenia, jak chcemy tego bezpiecznie uzywac
---------------------------
Uproszczenie takiej metody. Napisac latwo, ale przeczytac i zrozumiec trudniej.

boolean jestZatopiony() {
 			boolean zatopiony=true;
			for (int i=0;i<iloscMasztow;i++) zatopiony= zatopiony & isMasztTrafiony(i);
			if (zatopiony) {
				return true;
			}
			else return false;
	}

-----------------------------------
jeden test byl wadliwy, ale dlugo to nie wychodzilo, bo konczyl sie sukcesem.
Okazalo sie, ze to co robi, co tak naprawde nic nie testuje. i nie mial prawa nigdy NIE PRZEJSC
Dlaczego? Bo byla asercja taka:
Assert.assertEquals(false,statek.jestZatopiony());
a by default po kreacji statku, ta asercja jest spelniona - statek nie jest zatopiony
I test, probojac go zatopic, robil to tak nieudolnie, ze test zawsze przechodzil
Nie pisz takich testow. Czy w ogole takie testy maja sens? Gdzie testujemy cos,
co jak w tescie nie zrobimy ani linii kodu tylko np utworzymy sam obiekt, ktory bedzie testowany
zeby test nie failowal z powodu braku obiektu, to juz test przechodzi?
No nie ma sensu. A wiec ten test nie testowal wcale tej metody!
Czyli nie kazda metode da sie przetestowac w dwoch przypadkach: kiedy zwraca true, i kiedy false,
bo przeciez domyslnie metoda zawsze zwraca jedna z tych wartosci. wiec taki przypadek nie testuje sie.
----------------------
Kolejnosc modyfikatorow od lewej do prawej:
public / protected / private abstract static final



class asdf{
MapaOBSOLETE mapaOBSOLETE;

    GUIWidok(){
        mapaOBSOLETE =new MapaOBSOLETE();
        this(mapaOBSOLETE); // Error: cannot reference before supertype constructor has been called
    }

    GUIWidok(MapaOBSOLETE mapaOBSOLETE) {
        this.mapaOBSOLETE=mapaOBSOLETE;
        }
    }

    Problem w tym, ze
    1. mapaOBSOLETE powinna byc statyczna, bo inaczej nie istnieje jeszcze,
    bo jestesmy w trakcie tworzenia klasy, jak jestesmy w konstruktorze i nie mozemy sie odwolywac
    jeszcze do pol klasy, bo sa dopiero tworzone. (hee, no to jaki sens ma this.mapaOBSOLETE=mapaOBSOLETE; ???
    czemu nie ma bledu??
    2. this() musi byc pierwsza komenda w konstruktorze

    Rozwiazanie:

    GUIWidok(){
            this(new MapaOBSOLETE());
        }

    Teraz this jest na poczatku konstruktora, oraz nie uzywamy wcale zmiennej 'mapaOBSOLETE', ktora jest polem klasy :)




    Kod dzialal swietnie. Tworzyl gui.
    Az pewnego razu z jakiegos powodu utworzylem drugie gui.
    Niby nie powinno sie to stac, bo gui i tak potrzebuje jedno.
    Ale utworzylem fake-gui z jakiegos powodu, a pozniej normalne.
    Myslalem ze smieciarka pochlonie to pierwsze wiec nie ma problemu.
    I pochlanela.
    Ale konstruktor gui zostal wykonany sumarycznie dwa razy, a w nim takie cos:

    MapaGUI(MapaModel mapaModel) {
    if (d.height > 1024) {
                SIZE_OF_SQUARE += 10; // TU BUG
                GAP_BEETWEEN_SQUARES += 2; // TU BUG
                }

Kwadraty staly sie dziwnie wielkie. Na poczatku nie czailem co sie dzieje. Wydawalo mi sie,
ze moze kwadraty sa takie same, a okno za male. Ta klasa nie byla przystosowana do tworzenia
wiecej niz jednej jej instancji.
Zmiana kodu na:
if (d.height > 1024) {
            sizeOfSquare = SIZE_OF_SQUARE_FOR_BIG_SCREEN_RESOLUTION;
            gapBeetweenSquares = GAP_BEETWEEN_SQUARES_FOR_BIG_SCREEN_RESOLUTION;

rozwiazala problem

Wniosek: piszac klase upewnij sie w testach, ze mozna bezpiecznie utworzyc wiecej niz jeden obiekt tej klasy,
i wszystko jest ok. To, ze utworzysz jeden i jest ok, o niczym jeszcze nie swiadczy

Wniosek pozniejszy: hmm, wszystkiemu jednak winna zmienna SIZE_OF_SQUARE zadeklarowana jako static!!
Inaczej kazdy obiekt dostalby swoja instancje i byloby ok.
Wniosek: uwazaj na modyfikacje zmiennych statycznych!! Modyfikujesz je w jednym obiekcie, a
inny obiekt widzi te zmiane. I jesli nie planowales uzyc nigdy wiecej niz jednego... to po Ci static?

