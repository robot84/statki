#------------------------
# Pytania
#------------------------
# a jak dodam do indeksu plik i cos w nim zmienie pozniej? a pozniej zrobie commit,
# to ktora wersje zacommituje?

Separating different types of change such as bug fixes, new feature, and improvements into different sets of commits
 will allow you and your team members to easily understand why and how those changes were made.
 git add a
 git commit a -m "bugfix, in a"
 git add b
 git commit b -m "new feature, in b"


Dobry commit message:
1st line: Abstract of the contents changed by commits
2nd line: Blank line
3rd line and the following lines: Reason for changes



robimy zmiany i add
robimy commit, jest ok,
robimy push i jeblo, ze nie udalo sie (remote repo nie zostalo zmodyfikowane!)
no to robimy pull (sciaga nowsza wersje z remote repo do nas)
git widzi ze mamy konflikt w lokalnym repo, bo zlapalismy przed chwila zmiany z remote repo
i proboje automatycznie naprawic to, ale mu sie nie udaje :) dostajemy blad 'merge conflict'
i teraz manualnie musimy zajrzec w plik i zastanowic sie co zmienic, zeby to wypchnac jeszcze raz
i zeby przeszlo :) A robimy to tak:
Zawartosc naszego pliku zostala zmodyfikowana o takie cos:

<<<<<<<< HEAD
nasza wersja, ktora chcemy zakomitowac ("Swiat jest swietny")
=========
wersja nowsza, sciagnieta z repo ("Ludzie sa do dupy")
>>>>>>> 24b7debc4e7bd8e89d47b9e8b0d6de0 (hash)

Usuwamy to co nie potrzebujemy w pliku i zostawiamy tylko to, co chcemy mergowac.
np tekst nowej wersji z repo, albo do niego dodany i wpleciony jakos nasz tekst.
No i usuwamy linie <<< === i >>>
Finalnie wyglada to tak: "Swiat jest piekny, ale ludzie sa do dupy"
I robimy nowego commit'a (tzw merge commit)
Tym razem poszlo. Uff, super :) Idziemy na kawe

#------------------------
#tylko raz, przy tworzeniu repo
#------------------------

git init


#------------------------
# Jak zrobisz zmiany w plikach
#------------------------

# oznaczasz pliki, w ktorych cos zmieniles, jako idace do commitu
# (bo mozesz je commitowac pozniej, a nie teraz, jak ich nie oznaczysz)
# czyli dodajesz je do _indexu_. dopiero dodane do indeksu poleca commitem do repo

git add <file>
git add .

# jak juz oznaczyles, co chcesz wyslac do repo to wysylasz zmiany do lokalnego repo na dysku twoim
git commit -m "Zmiany"

# a jak po dniu ciezkiej pracy na lotnisku uzyskasz dostep do neta i bedziesz chcial, zeby inni zobaczyli zmiany
# to robisz push. Jak pracujesz nad projektem sam i nigdy go swiat nie zobaczy, to niby nie musisz tego robic
# ale warto miec kopie zapasowa w chmurze, czyz nie?
git push origin <branch>
git push origin master

# zmiana galazki, tworzenie nowej jak nie istnieje
git checkout <branch_name>

# a jak chcesz wywalic jakies pliki z repo, bo juz ich nie potrzebujesz, albo przypadkiem sie tam dostaly
git rm [-r] [-f] <files>
# oczywiscie to sie stanie dopiero w commicie, teraz je tylko oznaczyles jako do usuniecia
git commit -m "usunalem"
# i jak zawsze mozna zmiany popchnac na remote repo
git push origin master



git add -u :/ adds all modified file changes to the stage
git add * :/ adds modified and any new files (that's not gitignore'ed) to the stage